/******************************************************************************\
FILE:           task.zm
AUTHOR:         Chris van Run <C.P.A.vanRun@uu.nl>
ADAPTED BY:     Maarten

DESCRIPTION: Contains the description of the flow of the experiment

HISTORY:
2014-11-03 CvR   Created.

\******************************************************************************/

import test_page;
import stimuli;
import output;
import instructions;

Block task
{
    Block 
    {
        entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Block pre_prac_instruction
    {
        entry()
        {
            pause_page.set_text(PRE_PRAC_INSTRUCTION, true);
            pause_page.action(this);
            control.enable_all_buttons(CONTINUE);
        }
    }
    
    Block 
    {
        entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Block practice_block
    {
        int num_correct;
        
        on_event:entry()
        {
            // is adjusted when participant meets practice performance criterion.
            num_cycles = 10000;
        }
        
        TransientPart test_instruction
        {
            entry()
            {
                if (practice_block.cycle > 0)
                    instruction.enter();
                else
                    practice.enter();
            }
        }
        
        Part instruction
        {
            entry()
            {
                pause_page.set_text(
                        "Je had er " + num_correct + " goed.\n"
                        "Probeer er zoveel mogelijk goed te beantwoorden."
                        );
                pause_page.action(this);
            }
        }

        Block practice
        {

            on_event:entry()
            {
                test_page.hide_cursor();
                shuffle_items();

                num_cycles = prac_items.size;

                reset_practice_items();

                test_page.setup(practice.num_cycles, true);
            }
            
            on_event:exit()
            {
                num_correct = calc_num_practice_correct();
                if (num_correct > prac_items.size - NUM_ALLOWED_ERRORS)
                {
                    // terminate the practice_block loop
                    practice_block.num_cycles = practice_block.cycle;
                }
            }

            Trial trial
            {
                TestItem item;

                on_event:entry()
                {
                    item = prac_items[practice.cycle];
                    test_page.action(
                        this,
                        item,
                        reference_time,
                        practice.cycle
                        );
                }

                on_event:exit()
                {
                     //generate and save output.
                     TestOutput output;
                     output.block_nr = practice_block.cycle;
                     output.trial_nr = practice.cycle+1;
                     output.id = item.id;
                     output.congruence = item.flankers;
                     output.rt = test_page.response.rt;
                     output.selected_side = item.side;
                     output.expected_side = test_page.response.value;
                     output.correct = test_page.response.correct;

                     prac_output_append(output);
                }
            }
        }
    }
    
    Block 
    {
        entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Block post_prac_instruction
    {
        entry()
        {
            pause_page.set_text(POST_PRAC_INSTRUCTION, true);
            pause_page.action(this);
            control.enable_all_buttons(CONTINUE);
        }
    }
    
    Block 
    {
        entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Block test
    {

        on_event:entry()
        {
            test_page.hide_cursor();
            shuffle_items();

            num_cycles = test_items.size;

            test_page.setup();
        }

        on_event:exit()
        {
            test_page.show_cursor();
            test_page.cleanup();
        }

        Trial stimulus
        {
            TestItem item;

            on_event:entry()
            {
                item = test_items[test.cycle];
                test_page.action(this, item, now());

                // debug line:
                // println("Present: " + test_block.cycle + " " + item.id);
                // signal(this,CONTINUE);
            }

            on_event:exit()
            {
                //generate and save output.
                TestOutput output;
//                output.block_nr = test_block.block_nr;
                output.trial_nr = test.cycle+1;
                output.id = item.id;
                output.congruence = item.flankers;
                output.rt = test_page.response.rt;
                output.selected_side = item.side;
                output.expected_side = test_page.response.value;
                output.correct = test_page.response.correct;

                test_output_append(output);
            }
        }
    }

	Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}

void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
