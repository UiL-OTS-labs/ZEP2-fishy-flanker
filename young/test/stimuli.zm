/******************************************************************************\
FILE:           stimuli.zm
AUTHOR:         Theo Veenker (UiL-OTS) <T.J.G.Veenker@uu.nl>
ADAPTED BY:     -

DESCRIPTION:

Defines the formats of item table(s) and provides the actual content of
the item table(s) i.e. stimulus information.


HISTORY:
2011-10-26 TV   Created.

\******************************************************************************/

TestItem [..] test_items;
TestItem [..] prac_items;       // practice items

enum FlankerType
{
    CONGRUENT,
    NEUTRAL,
    INCONGRUENT,
}

enum DirectionType
{
    LEFT,
    RIGHT,
    NONE
}

// Item record used for the test phase item table.
record TestItem
{
    int             id;             // item id
    FlankerType     flankers;
    DirectionType   side;
    string          stim_fn;
    string          flanker_fn;
}

// Loads item table(s) from CSV file(s) in the stimuli folder.
// if(test::load_stimuli(test::testitem_list_normal, filename) != OK)
int load_stimuli()
{
    string fn = stimuli_dir() + PRAC_ITEM_FILENAME;
    if (prac_items.load(fn, true, 0) != OK) {
        print_error("Unable to load: " + fn + "\n");
        return ERROR;
    }

    fn = stimuli_dir() + TEST_ITEM_FILENAME;
    if (test_items.load(fn, true, 0) != OK) {
        print_error("Unable to load: " + fn + "\n");
        return ERROR;
    }

    return OK;
}

// simple print of the test Item array.
void print_TestItem_array(TestItem[] test_items)
{
    int n;
    int nitems = test_items.size;
    while (n < nitems)
    {
        println(
            string(n) + "\t" +
            string(test_items[n].id) + "\t" +
            string(test_items[n].flankers) + "\t" +
            string(test_items[n].side));
        n++;
    }
    println("======");
}
